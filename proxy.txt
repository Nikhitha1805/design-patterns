using System;
namespace ProxyPattern {    /// <summary>    /// Abstract class Subject    /// </summary>    public abstract class Subject    {
 public abstract void DoSomeWork();    }    /// <summary>    /// ConcreteSubject class    /// </summary>    public class ConcreteSubject : Subject    {        public override void DoSomeWork()        {            Console.WriteLine("ConcreteSubject.DoSomeWork()");        }    }    /// <summary>    /// Proxy class    /// </summary>    public class Proxy : Subject    {        Subject cs;
        public override void DoSomeWork()        {            Console.WriteLine("Proxy call happening now...");             //Lazy initialization:We'll not instantiate until the method is //called            if (cs == null)            {                cs = new ConcreteSubject();            }            cs.DoSomeWork();        }    }
    class Program    {        static void Main(string[] args)        {
 Console.WriteLine("***Proxy Pattern Demo***\n");            Proxy px = new Proxy();            px.DoSomeWork();            Console.ReadKey();        }    } }
 