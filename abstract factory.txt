using System;
namespace AbstractFactoryPattern {    public interface IDog    {        void Speak();                void Action();    }
    public interface ITiger    {        void Speak();                void Action();    }
    #region Wild Animal collections    class WildDog : IDog    {        public void Speak()        {            Console.WriteLine("Wild Dog says: Bow-Wow.");        }                public void Action()        {             Console.WriteLine("Wild Dogs prefer to roam freely in jungles.\n");        }    }    class WildTiger : ITiger    {        public void Speak()        {            Console.WriteLine("Wild Tiger says: Halum.");
 }        public void Action()        {            Console.WriteLine("Wild Tigers prefer hunting in jungles.\n");        }    }    #endregion
    #region Pet Animal collections    class PetDog : IDog    {        public void Speak()        {            Console.WriteLine("Pet Dog says: Bow-Wow.");        }        public void Action()        {            Console.WriteLine("Pet Dogs prefer to stay at home.\n");        }            }    class PetTiger : ITiger    {        public void Speak()        {            Console.WriteLine("Pet Tiger says: Halum.");        }        public void Action()        {            Console.WriteLine("Pet Tigers play in an animal circus.\n");        }            }    #endregion    //Abstract Factory    public interface IAnimalFactory    {        IDog GetDog();
 ITiger GetTiger();    }    //Concrete Factory-Wild Animal Factory    public class WildAnimalFactory : IAnimalFactory    {        public IDog GetDog()        {            return new WildDog();        }
        public ITiger GetTiger()        {            return new WildTiger();        }    }    //Concrete Factory-Pet Animal Factory    public class PetAnimalFactory : IAnimalFactory    {        public IDog GetDog()        {            return new PetDog();        }
        public ITiger GetTiger()        {            return new PetTiger();        }    }
    class Program    {        static void Main(string[] args)        {            Console.WriteLine("***Abstract Factory Pattern Demo***\n");
            //Making a wild dog through WildAnimalFactory            IAnimalFactory wildAnimalFactory = new WildAnimalFactory();            IDog wildDog = wildAnimalFactory.GetDog();         
  wildDog.Speak();            wildDog.Action();            //Making a wild tiger through WildAnimalFactory            ITiger wildTiger = wildAnimalFactory.GetTiger();                        wildTiger.Speak();            wildTiger.Action();
            Console.WriteLine("******************");
            //Making a pet dog through PetAnimalFactory            IAnimalFactory petAnimalFactory = new PetAnimalFactory();            IDog petDog = petAnimalFactory.GetDog();                        petDog.Speak();            petDog.Action();            //Making a pet tiger through PetAnimalFactory            ITiger petTiger = petAnimalFactory.GetTiger();                        petTiger.Speak();            petTiger.Action();
            Console.ReadLine();        }    } } 